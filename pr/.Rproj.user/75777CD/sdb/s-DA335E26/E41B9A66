{
    "collab_server" : "",
    "contents" : "library(data.table)\n\nsizeDistortionTest2 <- function(r, x, lags ) {\n\n  # load tables\n  df <- pr::df_gls95\n\n  pretest_table <- pr::pretest\n\n  N <- length(x)\n\n\n  # Equation (3) of Campbell and Yogo (2005)\n  x_diff <- c(NA, diff(x))\n  X <- x_diff\n  X <- cbind(X, shift(x, n=1, fill=NA, type=\"lag\"))\n  if (lags>1){\n    for (lag in 1:(lags-1)){\n      X <- cbind(X, shift(x_diff, n=lag, fill=NA, type=\"lag\"))\n\n    }\n  }\n  X <- na.omit(X)\n  lm_3 <- lm(X[,1]~ X[,-1])\n  smry_3 <- summary(lm_3)\n  bic <- BIC(lm_3)\n\n  # Equation (4) of Campbell and Yogo (2005)\n  lm_4 <- lm(r[2:N] ~ x[1:(N-1)])\n  smry_4 <- summary(lm_4)\n\n  beta_hat <- smry_4$coefficients[2,1]\n  SE_beta <- smry_4$coefficients[2,2]\n\n\n  e <- smry_3$residuals\n  u <- smry_4$residuals\n\n  sigma_u_hat_sq <- 1/(length(u)-2)*u%*%u\n  sigma_e_hat_sq <- 1/(length(e)-2)*e%*%e\n  sigma_ue_hat <- 1/(length(e)-2)*u[(length(u)-length(e)+1):length(u)]%*%e\n  delta_hat <- sigma_ue_hat/(sigma_u_hat_sq*sigma_e_hat_sq)^0.5\n\n\n  #########################DF GLS##########################################\n\n  rho_gls <- 1-7/(length(e))\n  y <- x - c(0,rho_gls*x[1:(length(x)-1)])\n  x_prime <- c(1,rep(1-rho_gls, length(x)-1))\n\n  # estimate linear model without intercept\n  lm_mugls <- lm(y~x_prime -1)\n  smry_mugls <- summary(lm_mugls)\n\n  mu_gls <- smry_mugls$coefficients[1,1]\n  x_bar <-  x - mu_gls\n  x_bar_diff <- c(NA, diff(x_bar))\n\n  X <- x_bar_diff\n  X <- cbind(X, shift(x_bar, n=1, fill=NA, type=\"lag\"))\n  if (lags>1){\n    for (lag in 1:(lags-1)){\n      X <- cbind(X, shift(x_bar_diff, n=lag, fill=NA, type=\"lag\"))\n\n    }\n  }\n  X <- na.omit(X)\n\n  # estimate linear model without intercept\n  lm_dfgls <- lm( X[,1]~ X[,-1]  -1)\n  smry_dfgls <- summary(lm_dfgls)\n  df_gls <- smry_dfgls$coefficients[1,\"t value\"]\n  if (df_gls< (-5)){\n    warning(\"DF-GLS test statistic < -5: Test unreliable.\")}\n\n  #get closest tabulated delta value\n  table_deltas <- as.numeric(row.names(pretest_table))\n\n\n  delta_lookup <- table_deltas[which.min(abs(table_deltas - c(delta_hat)) )]\n\n\n  table_df_gls <- as.numeric(row.names(df))\n  df_gls_lookup <- table_df_gls[which.min(abs(table_df_gls - c(df_gls)) )]\n\n\n  ci <- c(df[as.character(df_gls_lookup),1][[1]], df[as.character(df_gls_lookup),2][[1]])\n\n  ###########test the null hypothesis that the actual size exceeds 7.5%######\n\n\n\n  pretest_ci <- c(pretest_table[as.character(delta_lookup),1][[1]],\n                  pretest_table[as.character(delta_lookup),2][[1]])\n\n\n  reject_null <- ( ci[2]<pretest_ci[1] | ci[1]>pretest_ci[2] )\n\n  if (is.na(reject_null)){\n    reject_null <- TRUE\n    }\n\n\n  return(reject_null)\n}\n",
    "created" : 1560870032709.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "613786652",
    "id" : "E41B9A66",
    "lastKnownWriteTime" : 1561031051,
    "last_content_update" : 1561031051010,
    "path" : "~/Desktop/PersistentRegressors/pr/R/pretest2.R",
    "project_path" : "R/pretest2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 15,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}