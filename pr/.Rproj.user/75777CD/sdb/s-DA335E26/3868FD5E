{
    "collab_server" : "",
    "contents" : "library(data.table)\n\nbonferroniQci <- function(r, x, lags) {\n\n\n  # load tables\n  df <- pr::bonferroniQ\n\n  N <- length(x)\n\n  # Equation (1) of Campbell and Yogo (2005)\n  lm_1 <- lm(x[2:N] ~ x[1:(N-1)])\n  smry_1 <- summary(lm_1)\n\n  # Equation (3) of Campbell and Yogo (2005)\n  x_diff <- c(NA, diff(x))\n  X <- x_diff\n  X <- cbind(X, shift(x, n=1, fill=NA, type=\"lag\"))\n  if (lags>1){\n    for (lag in 1:(lags-1)){\n      X <- cbind(X, shift(x_diff, n=lag, fill=NA, type=\"lag\"))\n\n    }\n  }\n  X <- na.omit(X)\n  lm_3 <- lm(X[,1]~ X[,-1])\n  smry_3 <- summary(lm_3)\n  bic <- BIC(lm_3)\n\n  # Equation (4) of Campbell and Yogo (2005)\n  lm_4 <- lm(r[2:N] ~ x[1:(N-1)])\n  smry_4 <- summary(lm_4)\n\n  beta_hat <- smry_4$coefficients[2,1]\n  SE_beta <- smry_4$coefficients[2,2]\n\n  rho_hat <- smry_1$coefficients[2,1]\n  SE_rho_hat <- smry_1$coefficients[2,2]\n\n\n  e <- smry_3$residuals\n  u <- smry_4$residuals\n  v <- smry_1$residuals\n\n  sigma_u_hat_sq <- 1/(length(u)-2)*u%*%u\n  sigma_e_hat_sq <- 1/(length(e)-2)*e%*%e\n  sigma_ue_hat <- 1/(length(e)-2)*u[(length(u)-length(e)+1):length(u)]%*%e\n  sigma_v_hat_sq <- 1/(length(v)-2)*v%*%v\n  delta_hat <- sigma_ue_hat/(sigma_u_hat_sq*sigma_e_hat_sq)^0.5\n  if (lags>1){\n    omega_sq_hat <- sigma_e_hat_sq/(1-sum(lm_3$coefficients[3:length(lm_3$coefficients)]))^2\n  }else{\n    omega_sq_hat <- sigma_e_hat_sq\n  }\n\n  #########################DF GLS##########################################\n\n    rho_gls <- 1-7/(length(e))\n    y <- x - c(0,rho_gls*x[1:length(x)-1])\n    x_prime <- c(1,rep(1-rho_gls, length(x)-1))\n\n    # estimate linear model without intercept\n    lm_mugls <- lm(y~x_prime -1)\n    smry_mugls <- summary(lm_mugls)\n\n    mu_gls <- smry_mugls$coefficients[1,1]\n    x_bar <-  x - mu_gls\n    x_bar_diff <- c(NA, diff(x_bar))\n\n    X <- x_bar_diff\n    X <- cbind(X, shift(x_bar, n=1, fill=NA, type=\"lag\"))\n    if (lags>1){\n      for (lag in 1:(lags-1)){\n        X <- cbind(X, shift(x_bar_diff, n=lag, fill=NA, type=\"lag\"))\n\n      }\n    }\n    X <- na.omit(X)\n\n    # estimate linear model without intercept\n    lm_dfgls <- lm( X[,1]~ X[,-1]  -1)\n    smry_dfgls <- summary(lm_dfgls)\n    df_gls <- smry_dfgls$coefficients[1,\"t value\"]\n\n    if (df_gls< (-5)){\n      warning(\"DF-GLS test statistic < -5: confidence intervals unreliable.\")}\n\n\n    #get closest tabulated delta value\n    table_deltas <- c(-0.999, -0.975, -0.95, -0.925,\n                   -0.9, -0.875, -0.85, -0.825,\n                   -0.8, -0.775, -0.75, -0.725,\n                   0.7, -0.675, -0.65, -0.625,\n                   -0.6, -0.575, -0.55, -0.525,\n                   -0.5, -0.475, -0.45, -0.425,\n                   -0.4, -0.375, -0.35, -0.325,\n                   -0.3, -0.275, -0.25, -0.225,\n                   -0.2, -0.175, -0.15, -0.125,\n                   -0.1, -0.075, -0.05, -0.025\n                   )\n\n\n  delta_lookup <- table_deltas[which.min(abs(table_deltas - c(delta_hat)) )]\n\n\n  table_df_gls <- as.numeric(row.names(df))\n  df_gls_lookup <- table_df_gls[which.min(abs(table_df_gls - c(df_gls)) )]\n\n\n  ci <- df[as.character(df_gls_lookup),as.character(delta_lookup)][[1]]\n\n  ci_rho <- c(1+ci[[1]]/length(e), 1+ci[[2]]/length(e))\n\n  r_star_rho_l <- (r[2:length(r)] - c(sigma_ue_hat/(sqrt(sigma_e_hat_sq)*sqrt(omega_sq_hat)))\n                   *(x[2:length(x)]-ci_rho[[1]]*x[1:(length(x)-1)]))\n\n  r_star_rho_u <- (r[2:length(r)] - c(sigma_ue_hat/(sqrt(sigma_e_hat_sq)*sqrt(omega_sq_hat)))\n                   *(x[2:length(x)]-ci_rho[[2]]*x[1:(length(x)-1)]))\n\n  lm_rstarl <- lm(r_star_rho_l ~ x[1:(length(x)-1)])\n  smry_rstarl <- summary(lm_rstarl)\n  beta_rho_l <- smry_rstarl$coefficients[2,1]\n  se_beta_rho_l <- smry_rstarl$coefficients[2,2]\n\n  lm_rstaru <- lm(r_star_rho_u ~ x[1:(length(x)-1)])\n  smry_rstaru <- summary(lm_rstaru)\n  beta_rho_u <- smry_rstaru$coefficients[2,1]\n  se_beta_rho_u <- smry_rstaru$coefficients[2,2]\n\n  a <- as.numeric((length(e)-2)/2*sigma_ue_hat/(sqrt(sigma_e_hat_sq)*sqrt(omega_sq_hat))\n       *(omega_sq_hat/sigma_v_hat_sq-1)*SE_rho_hat^2)\n\n  ci_beta <- c(beta_rho_u+a-1.645*sqrt(1-delta_hat^2)*SE_beta,\n               beta_rho_l+a+1.645*sqrt(1-delta_hat^2)*SE_beta)\n\n\n  return(c(ci_beta, ci_rho, delta_hat, lags, df_gls, sd(e)/sd(u)))\n\n}\n\n\n",
    "created" : 1560594107439.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4279611563",
    "id" : "3868FD5E",
    "lastKnownWriteTime" : 1561134619,
    "last_content_update" : 1561134619830,
    "path" : "~/Desktop/PersistentRegressors/pr/R/bonferroniQtest2.R",
    "project_path" : "R/bonferroniQtest2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}